export const TRIANGULATION = [
127, 34, 139, 11, 0, 37, 232, 231, 120, 72, 37, 39, 128, 121, 47, 232, 121, 128,
  104, 69, 67, 175, 171, 148, 157, 154, 155, 118, 50, 101, 73, 39, 40, 9, 151, 108,
  48, 115, 131, 194, 204, 211, 74, 40, 185, 80, 42, 183, 40, 92, 186, 230, 229, 118,
  202, 212, 214, 83, 18, 17, 76, 61, 146, 160, 29, 30, 56, 157, 173, 106, 204, 194,
  135, 214, 192, 203, 165, 98, 21, 71, 68, 51, 45, 4, 144, 24, 23, 77, 146, 91,
  205, 50, 187, 201, 200, 18, 91, 106, 182, 90, 91, 181, 85, 84, 17, 206, 203, 36,
  148, 171, 140, 92, 40, 39, 193, 189, 244, 159, 158, 28, 247, 246, 161, 236, 3, 196,
  54, 68, 104, 193, 168, 8, 117, 228, 31, 189, 193, 55, 98, 97, 99, 126, 47, 100,
  166, 79, 218, 155, 154, 26, 209, 49, 131, 135, 136, 150, 47, 126, 217, 223, 52, 53,
  45, 51, 134, 211, 170, 140, 67, 69, 108, 43, 106, 91, 230, 119, 120, 226, 130, 247,
  63, 53, 52, 238, 20, 242, 46, 70, 156, 78, 62, 96, 46, 53, 63, 143, 34, 227,
  173, 155, 133, 123, 117, 111, 44, 125, 19, 236, 134, 51, 216, 206, 205, 154, 153, 22,
  39, 37, 167, 200, 201, 208, 36, 142, 100, 57, 212, 202, 20, 60, 99, 28, 158, 157,
  35, 226, 113, 160, 159, 27, 204, 202, 210, 113, 225, 46, 43, 202, 204, 62, 76, 77,
  137, 123, 116, 41, 38, 72, 203, 129, 142, 64, 98, 240, 49, 102, 64, 41, 73, 74,
  212, 216, 207, 42, 74, 184, 169, 170, 211, 170, 149, 176, 105, 66, 69, 122, 6, 168,
  123, 147, 187, 96, 62, 77, 227, 34, 127, 234, 127, 234, 215, 138, 149, 176, 149, 150,
  136, 215, 131, 115, 47, 217, 220, 115, 219, 237, 218, 79, 166, 48, 49, 64, 98,
  240, 97, 227, 137, 116, 38, 126, 100, 196, 3, 98, 64, 193, 243, 112, 244, 189, 55,
  243, 190, 56, 28, 27, 234, 127, 120, 231, 230, 120, 203, 36, 101, 50, 205, 187,
  201, 200, 18, 90, 91, 180, 222, 221, 189, 190, 243, 244, 33, 160, 27, 160, 161,
  246, 33, 7, 163, 144, 145, 153, 22, 23, 27, 26, 154, 206, 203, 36, 165, 92, 39,
  39, 167, 193, 245, 156, 70, 58, 144, 24, 236, 134, 107, 55, 193, 168, 8, 105,
  69, 108, 68, 104, 69
];

const drawPath = (ctx, points, closePath) => {
  const region = new Path2D();
  region.moveTo(points[0][0], points[0][1]);
  for (let i = 1; i < points.length; i++) {
    const point = points[i];
    region.lineTo(point[0], point[1]);
  }

  if (closePath) {
    region.closePath();
  }
  ctx.strokeStyle = "grey";
  ctx.stroke(region);
};



export const drawMesh = (predictions, ctx) => {
  if (!predictions.length) return;

  predictions.forEach((prediction) => {
    const keypoints = prediction.scaledMesh;

    // SAFELY DRAW TRIANGLES
    for (let i = 0; i < TRIANGULATION.length; i += 3) {
      const points = [
        TRIANGULATION[i],
        TRIANGULATION[i + 1],
        TRIANGULATION[i + 2],
      ].map((index) => keypoints[index]);

      // Skip if any point is undefined
      if (points.some((point) => !point)) continue;

      drawPath(ctx, points, true);
    }

    // DRAW POINTS
    keypoints.forEach((keypoint) => {
      const [x, y] = keypoint;
      ctx.beginPath();
      ctx.arc(x, y, 1, 0, 2 * Math.PI);
      ctx.fillStyle = "aqua";
      ctx.fill();
    });
  });
};
